name: Frontend Release

on:
  push:
    branches:
      - master
    paths:
      - 'src/**'
      - 'package.json'
      - 'cloudbuild.yaml'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0) - leave empty for auto-bump'
        required: false
        type: string

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Get version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.version }}" ]; then
            # Manual version provided
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            # Auto-bump version based on commits
            npm install -g conventional-changelog-cli
            
            # Get last tag
            LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
            echo "last_tag=$LAST_TAG" >> $GITHUB_OUTPUT
            
            # Get commits since last tag
            COMMITS=$(git log $LAST_TAG..HEAD --oneline --grep="^(feat|fix|docs|style|refactor|test|chore|perf|ci|build|revert):" || echo "")
            
            if [ -z "$COMMITS" ]; then
              echo "No conventional commits found. Skipping version bump."
              exit 0
            fi
            
            # Determine bump type
            if echo "$COMMITS" | grep -q "^[^:]*feat"; then
              BUMP_TYPE="minor"
            elif echo "$COMMITS" | grep -q "^[^:]*fix"; then
              BUMP_TYPE="patch"
            elif echo "$COMMITS" | grep -q "^[^:]*BREAKING CHANGE"; then
              BUMP_TYPE="major"
            else
              BUMP_TYPE="patch"
            fi
            
            # Calculate new version
            CURRENT_VERSION=${LAST_TAG#v}
            IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
            
            case $BUMP_TYPE in
              major)
                NEW_VERSION="v$((MAJOR + 1)).0.0"
                ;;
              minor)
                NEW_VERSION="v$MAJOR.$((MINOR + 1)).0"
                ;;
              patch)
                NEW_VERSION="v$MAJOR.$MINOR.$((PATCH + 1))"
                ;;
            esac
            
            echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "New version: $NEW_VERSION"
          fi

      - name: Update package version
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          # Remove 'v' prefix if present
          VERSION=${VERSION#v}
          # Ensure version has proper format (MAJOR.MINOR.PATCH)
          if [[ $VERSION =~ ^[0-9]+\.[0-9]+$ ]]; then
            VERSION="${VERSION}.0"
          fi
          npm version $VERSION --no-git-tag-version

      - name: Generate changelog
        id: changelog
        run: |
          npm install -g conventional-changelog-cli
          conventional-changelog -p angular -i CHANGELOG.md -s -r 0
          
          VERSION="${{ steps.version.outputs.version }}"
          CHANGELOG=$(awk "/^## \[$VERSION\]/,/^## \[/" CHANGELOG.md | sed '$d' || echo "No changelog entries found for this version")
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Commit version updates
        run: |
          git add package.json CHANGELOG.md
          git commit -m "chore: bump version to ${{ steps.version.outputs.version }}"
          # Fetch prod branch and handle conflicts
          git fetch origin prod || true
          # Force push to prod branch (this overwrites any conflicts)
          git push origin HEAD:prod --force

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.version }}
          release_name: Frontend Release ${{ steps.version.outputs.version }}
          body: |
            ## Frontend Changes
            
            ${{ steps.changelog.outputs.changelog }}
            
            ## Deployment
            
            This release will automatically trigger deployment to production via Google Cloud Build.
          draft: false
          prerelease: false
        continue-on-error: true

      - name: Deployment
        run: |
          echo "Frontend deployment will be triggered automatically by the push to prod branch"
          echo "Google Cloud Build trigger will handle the frontend deployment process"